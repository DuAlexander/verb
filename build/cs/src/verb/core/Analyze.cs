
#pragma warning disable 109, 114, 219, 429, 168, 162
namespace verb.core{
	public  class KnotMultiplicity : global::haxe.lang.HxObject {
		public    KnotMultiplicity(global::haxe.lang.EmptyObject empty){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
				}
				
			}
			#line default
		}
		
		
		public    KnotMultiplicity(double knot, int mult){
			unchecked {
				#line 17 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::verb.core.KnotMultiplicity.__hx_ctor_verb_core_KnotMultiplicity(this, knot, mult);
			}
			#line default
		}
		
		
		public static   void __hx_ctor_verb_core_KnotMultiplicity(global::verb.core.KnotMultiplicity __temp_me33, double knot, int mult){
			unchecked {
				#line 18 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				__temp_me33.knot = knot;
				__temp_me33.mult = mult;
			}
			#line default
		}
		
		
		public static  new object __hx_createEmpty(){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return new global::verb.core.KnotMultiplicity(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			}
			#line default
		}
		
		
		public static  new object __hx_create(global::Array arr){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return new global::verb.core.KnotMultiplicity(((double) (global::haxe.lang.Runtime.toDouble(arr[0])) ), ((int) (global::haxe.lang.Runtime.toInt(arr[1])) ));
			}
			#line default
		}
		
		
		public  double knot;
		
		public  int mult;
		
		public virtual   void inc(){
			unchecked {
				#line 23 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				this.mult++;
			}
			#line default
		}
		
		
		public override   double __hx_setField_f(string field, int hash, double @value, bool handleProperties){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				switch (hash){
					case 1214605296:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						this.mult = ((int) (@value) );
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return @value;
					}
					
					
					case 1192078728:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						this.knot = ((double) (@value) );
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return @value;
					}
					
					
					default:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override   object __hx_setField(string field, int hash, object @value, bool handleProperties){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				switch (hash){
					case 1214605296:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						this.mult = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return @value;
					}
					
					
					case 1192078728:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						this.knot = ((double) (global::haxe.lang.Runtime.toDouble(@value)) );
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return @value;
					}
					
					
					default:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override   object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				switch (hash){
					case 5246174:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(((object) (this) ), ((string) ("inc") ), ((int) (5246174) ))) );
					}
					
					
					case 1214605296:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return this.mult;
					}
					
					
					case 1192078728:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return this.knot;
					}
					
					
					default:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override   double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				switch (hash){
					case 1214605296:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return ((double) (this.mult) );
					}
					
					
					case 1192078728:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return this.knot;
					}
					
					
					default:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override   object __hx_invokeField(string field, int hash, global::Array dynargs){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				switch (hash){
					case 5246174:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						this.inc();
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						break;
					}
					
					
					default:
					{
						#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return default(object);
			}
			#line default
		}
		
		
		public override   void __hx_getFields(global::Array<object> baseArr){
			unchecked {
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				baseArr.push("mult");
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				baseArr.push("knot");
				#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 13 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					base.__hx_getFields(baseArr);
				}
				
			}
			#line default
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace verb.core{
	public  class Analyze : global::haxe.lang.HxObject {
		static Analyze() {
			#line 538 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
			global::verb.core.Analyze.Tvalues = new global::Array<object>(new object[]{new global::Array<double>(new double[]{}), new global::Array<double>(new double[]{}), new global::Array<double>(new double[]{-0.5773502691896257645091487805019574556476, 0.5773502691896257645091487805019574556476}), new global::Array<double>(new double[]{((double) (0) ), -0.7745966692414833770358530799564799221665, 0.7745966692414833770358530799564799221665}), new global::Array<double>(new double[]{-0.3399810435848562648026657591032446872005, 0.3399810435848562648026657591032446872005, -0.8611363115940525752239464888928095050957, 0.8611363115940525752239464888928095050957}), new global::Array<double>(new double[]{((double) (0) ), -0.5384693101056830910363144207002088049672, 0.5384693101056830910363144207002088049672, -0.9061798459386639927976268782993929651256, 0.9061798459386639927976268782993929651256}), new global::Array<double>(new double[]{0.6612093864662645136613995950199053470064, -0.6612093864662645136613995950199053470064, -0.2386191860831969086305017216807119354186, 0.2386191860831969086305017216807119354186, -0.9324695142031520278123015544939946091347, 0.9324695142031520278123015544939946091347}), new global::Array<double>(new double[]{((double) (0) ), 0.4058451513773971669066064120769614633473, -0.4058451513773971669066064120769614633473, -0.7415311855993944398638647732807884070741, 0.7415311855993944398638647732807884070741, -0.9491079123427585245261896840478512624007, 0.9491079123427585245261896840478512624007}), new global::Array<double>(new double[]{-0.1834346424956498049394761423601839806667, 0.1834346424956498049394761423601839806667, -0.5255324099163289858177390491892463490419, 0.5255324099163289858177390491892463490419, -0.7966664774136267395915539364758304368371, 0.7966664774136267395915539364758304368371, -0.9602898564975362316835608685694729904282, 0.9602898564975362316835608685694729904282}), new global::Array<double>(new double[]{((double) (0) ), -0.8360311073266357942994297880697348765441, 0.8360311073266357942994297880697348765441, -0.9681602395076260898355762029036728700494, 0.9681602395076260898355762029036728700494, -0.3242534234038089290385380146433366085719, 0.3242534234038089290385380146433366085719, -0.6133714327005903973087020393414741847857, 0.6133714327005903973087020393414741847857}), new global::Array<double>(new double[]{-0.1488743389816312108848260011297199846175, 0.1488743389816312108848260011297199846175, -0.4333953941292471907992659431657841622000, 0.4333953941292471907992659431657841622000, -0.6794095682990244062343273651148735757692, 0.6794095682990244062343273651148735757692, -0.8650633666889845107320966884234930485275, 0.8650633666889845107320966884234930485275, -0.9739065285171717200779640120844520534282, 0.9739065285171717200779640120844520534282}), new global::Array<double>(new double[]{((double) (0) ), -0.2695431559523449723315319854008615246796, 0.2695431559523449723315319854008615246796, -0.5190961292068118159257256694586095544802, 0.5190961292068118159257256694586095544802, -0.7301520055740493240934162520311534580496, 0.7301520055740493240934162520311534580496, -0.8870625997680952990751577693039272666316, 0.8870625997680952990751577693039272666316, -0.9782286581460569928039380011228573907714, 0.9782286581460569928039380011228573907714}), new global::Array<double>(new double[]{-0.1252334085114689154724413694638531299833, 0.1252334085114689154724413694638531299833, -0.3678314989981801937526915366437175612563, 0.3678314989981801937526915366437175612563, -0.5873179542866174472967024189405342803690, 0.5873179542866174472967024189405342803690, -0.7699026741943046870368938332128180759849, 0.7699026741943046870368938332128180759849, -0.9041172563704748566784658661190961925375, 0.9041172563704748566784658661190961925375, -0.9815606342467192506905490901492808229601, 0.9815606342467192506905490901492808229601}), new global::Array<double>(new double[]{((double) (0) ), -0.2304583159551347940655281210979888352115, 0.2304583159551347940655281210979888352115, -0.4484927510364468528779128521276398678019, 0.4484927510364468528779128521276398678019, -0.6423493394403402206439846069955156500716, 0.6423493394403402206439846069955156500716, -0.8015780907333099127942064895828598903056, 0.8015780907333099127942064895828598903056, -0.9175983992229779652065478365007195123904, 0.9175983992229779652065478365007195123904, -0.9841830547185881494728294488071096110649, 0.9841830547185881494728294488071096110649}), new global::Array<double>(new double[]{-0.1080549487073436620662446502198347476119, 0.1080549487073436620662446502198347476119, -0.3191123689278897604356718241684754668342, 0.3191123689278897604356718241684754668342, -0.5152486363581540919652907185511886623088, 0.5152486363581540919652907185511886623088, -0.6872929048116854701480198030193341375384, 0.6872929048116854701480198030193341375384, -0.8272013150697649931897947426503949610397, 0.8272013150697649931897947426503949610397, -0.9284348836635735173363911393778742644770, 0.9284348836635735173363911393778742644770, -0.9862838086968123388415972667040528016760, 0.9862838086968123388415972667040528016760}), new global::Array<double>(new double[]{((double) (0) ), -0.2011940939974345223006283033945962078128, 0.2011940939974345223006283033945962078128, -0.3941513470775633698972073709810454683627, 0.3941513470775633698972073709810454683627, -0.5709721726085388475372267372539106412383, 0.5709721726085388475372267372539106412383, -0.7244177313601700474161860546139380096308, 0.7244177313601700474161860546139380096308, -0.8482065834104272162006483207742168513662, 0.8482065834104272162006483207742168513662, -0.9372733924007059043077589477102094712439, 0.9372733924007059043077589477102094712439, -0.9879925180204854284895657185866125811469, 0.9879925180204854284895657185866125811469}), new global::Array<double>(new double[]{-0.0950125098376374401853193354249580631303, 0.0950125098376374401853193354249580631303, -0.2816035507792589132304605014604961064860, 0.2816035507792589132304605014604961064860, -0.4580167776572273863424194429835775735400, 0.4580167776572273863424194429835775735400, -0.6178762444026437484466717640487910189918, 0.6178762444026437484466717640487910189918, -0.7554044083550030338951011948474422683538, 0.7554044083550030338951011948474422683538, -0.8656312023878317438804678977123931323873, 0.8656312023878317438804678977123931323873, -0.9445750230732325760779884155346083450911, 0.9445750230732325760779884155346083450911, -0.9894009349916499325961541734503326274262, 0.9894009349916499325961541734503326274262}), new global::Array<double>(new double[]{((double) (0) ), -0.1784841814958478558506774936540655574754, 0.1784841814958478558506774936540655574754, -0.3512317634538763152971855170953460050405, 0.3512317634538763152971855170953460050405, -0.5126905370864769678862465686295518745829, 0.5126905370864769678862465686295518745829, -0.6576711592166907658503022166430023351478, 0.6576711592166907658503022166430023351478, -0.7815140038968014069252300555204760502239, 0.7815140038968014069252300555204760502239, -0.8802391537269859021229556944881556926234, 0.8802391537269859021229556944881556926234, -0.9506755217687677612227169578958030214433, 0.9506755217687677612227169578958030214433, -0.9905754753144173356754340199406652765077, 0.9905754753144173356754340199406652765077}), new global::Array<double>(new double[]{-0.0847750130417353012422618529357838117333, 0.0847750130417353012422618529357838117333, -0.2518862256915055095889728548779112301628, 0.2518862256915055095889728548779112301628, -0.4117511614628426460359317938330516370789, 0.4117511614628426460359317938330516370789, -0.5597708310739475346078715485253291369276, 0.5597708310739475346078715485253291369276, -0.6916870430603532078748910812888483894522, 0.6916870430603532078748910812888483894522, -0.8037049589725231156824174550145907971032, 0.8037049589725231156824174550145907971032, -0.8926024664975557392060605911271455154078, 0.8926024664975557392060605911271455154078, -0.9558239495713977551811958929297763099728, 0.9558239495713977551811958929297763099728, -0.9915651684209309467300160047061507702525, 0.9915651684209309467300160047061507702525}), new global::Array<double>(new double[]{((double) (0) ), -0.1603586456402253758680961157407435495048, 0.1603586456402253758680961157407435495048, -0.3165640999636298319901173288498449178922, 0.3165640999636298319901173288498449178922, -0.4645707413759609457172671481041023679762, 0.4645707413759609457172671481041023679762, -0.6005453046616810234696381649462392798683, 0.6005453046616810234696381649462392798683, -0.7209661773352293786170958608237816296571, 0.7209661773352293786170958608237816296571, -0.8227146565371428249789224867127139017745, 0.8227146565371428249789224867127139017745, -0.9031559036148179016426609285323124878093, 0.9031559036148179016426609285323124878093, -0.9602081521348300308527788406876515266150, 0.9602081521348300308527788406876515266150, -0.9924068438435844031890176702532604935893, 0.9924068438435844031890176702532604935893}), new global::Array<double>(new double[]{-0.0765265211334973337546404093988382110047, 0.0765265211334973337546404093988382110047, -0.2277858511416450780804961953685746247430, 0.2277858511416450780804961953685746247430, -0.3737060887154195606725481770249272373957, 0.3737060887154195606725481770249272373957, -0.5108670019508270980043640509552509984254, 0.5108670019508270980043640509552509984254, -0.6360536807265150254528366962262859367433, 0.6360536807265150254528366962262859367433, -0.7463319064601507926143050703556415903107, 0.7463319064601507926143050703556415903107, -0.8391169718222188233945290617015206853296, 0.8391169718222188233945290617015206853296, -0.9122344282513259058677524412032981130491, 0.9122344282513259058677524412032981130491, -0.9639719272779137912676661311972772219120, 0.9639719272779137912676661311972772219120, -0.9931285991850949247861223884713202782226, 0.9931285991850949247861223884713202782226}), new global::Array<double>(new double[]{((double) (0) ), -0.1455618541608950909370309823386863301163, 0.1455618541608950909370309823386863301163, -0.2880213168024010966007925160646003199090, 0.2880213168024010966007925160646003199090, -0.4243421202074387835736688885437880520964, 0.4243421202074387835736688885437880520964, -0.5516188358872198070590187967243132866220, 0.5516188358872198070590187967243132866220, -0.6671388041974123193059666699903391625970, 0.6671388041974123193059666699903391625970, -0.7684399634756779086158778513062280348209, 0.7684399634756779086158778513062280348209, -0.8533633645833172836472506385875676702761, 0.8533633645833172836472506385875676702761, -0.9200993341504008287901871337149688941591, 0.9200993341504008287901871337149688941591, -0.9672268385663062943166222149076951614246, 0.9672268385663062943166222149076951614246, -0.9937521706203895002602420359379409291933, 0.9937521706203895002602420359379409291933}), new global::Array<double>(new double[]{-0.0697392733197222212138417961186280818222, 0.0697392733197222212138417961186280818222, -0.2078604266882212854788465339195457342156, 0.2078604266882212854788465339195457342156, -0.3419358208920842251581474204273796195591, 0.3419358208920842251581474204273796195591, -0.4693558379867570264063307109664063460953, 0.4693558379867570264063307109664063460953, -0.5876404035069115929588769276386473488776, 0.5876404035069115929588769276386473488776, -0.6944872631866827800506898357622567712673, 0.6944872631866827800506898357622567712673, -0.7878168059792081620042779554083515213881, 0.7878168059792081620042779554083515213881, -0.8658125777203001365364256370193787290847, 0.8658125777203001365364256370193787290847, -0.9269567721871740005206929392590531966353, 0.9269567721871740005206929392590531966353, -0.9700604978354287271239509867652687108059, 0.9700604978354287271239509867652687108059, -0.9942945854823992920730314211612989803930, 0.9942945854823992920730314211612989803930}), new global::Array<double>(new double[]{((double) (0) ), -0.1332568242984661109317426822417661370104, 0.1332568242984661109317426822417661370104, -0.2641356809703449305338695382833096029790, 0.2641356809703449305338695382833096029790, -0.3903010380302908314214888728806054585780, 0.3903010380302908314214888728806054585780, -0.5095014778460075496897930478668464305448, 0.5095014778460075496897930478668464305448, -0.6196098757636461563850973116495956533871, 0.6196098757636461563850973116495956533871, -0.7186613631319501944616244837486188483299, 0.7186613631319501944616244837486188483299, -0.8048884016188398921511184069967785579414, 0.8048884016188398921511184069967785579414, -0.8767523582704416673781568859341456716389, 0.8767523582704416673781568859341456716389, -0.9329710868260161023491969890384229782357, 0.9329710868260161023491969890384229782357, -0.9725424712181152319560240768207773751816, 0.9725424712181152319560240768207773751816, -0.9947693349975521235239257154455743605736, 0.9947693349975521235239257154455743605736}), new global::Array<double>(new double[]{-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745})});
			#line 566 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
			global::verb.core.Analyze.Cvalues = new global::Array<object>(new object[]{new global::Array<double>(new double[]{}), new global::Array<double>(new double[]{}), new global::Array<double>(new double[]{1.0, 1.0}), new global::Array<double>(new double[]{0.8888888888888888888888888888888888888888, 0.5555555555555555555555555555555555555555, 0.5555555555555555555555555555555555555555}), new global::Array<double>(new double[]{0.6521451548625461426269360507780005927646, 0.6521451548625461426269360507780005927646, 0.3478548451374538573730639492219994072353, 0.3478548451374538573730639492219994072353}), new global::Array<double>(new double[]{0.5688888888888888888888888888888888888888, 0.4786286704993664680412915148356381929122, 0.4786286704993664680412915148356381929122, 0.2369268850561890875142640407199173626432, 0.2369268850561890875142640407199173626432}), new global::Array<double>(new double[]{0.3607615730481386075698335138377161116615, 0.3607615730481386075698335138377161116615, 0.4679139345726910473898703439895509948116, 0.4679139345726910473898703439895509948116, 0.1713244923791703450402961421727328935268, 0.1713244923791703450402961421727328935268}), new global::Array<double>(new double[]{0.4179591836734693877551020408163265306122, 0.3818300505051189449503697754889751338783, 0.3818300505051189449503697754889751338783, 0.2797053914892766679014677714237795824869, 0.2797053914892766679014677714237795824869, 0.1294849661688696932706114326790820183285, 0.1294849661688696932706114326790820183285}), new global::Array<double>(new double[]{0.3626837833783619829651504492771956121941, 0.3626837833783619829651504492771956121941, 0.3137066458778872873379622019866013132603, 0.3137066458778872873379622019866013132603, 0.2223810344533744705443559944262408844301, 0.2223810344533744705443559944262408844301, 0.1012285362903762591525313543099621901153, 0.1012285362903762591525313543099621901153}), new global::Array<double>(new double[]{0.3302393550012597631645250692869740488788, 0.1806481606948574040584720312429128095143, 0.1806481606948574040584720312429128095143, 0.0812743883615744119718921581105236506756, 0.0812743883615744119718921581105236506756, 0.3123470770400028400686304065844436655987, 0.3123470770400028400686304065844436655987, 0.2606106964029354623187428694186328497718, 0.2606106964029354623187428694186328497718}), new global::Array<double>(new double[]{0.2955242247147528701738929946513383294210, 0.2955242247147528701738929946513383294210, 0.2692667193099963550912269215694693528597, 0.2692667193099963550912269215694693528597, 0.2190863625159820439955349342281631924587, 0.2190863625159820439955349342281631924587, 0.1494513491505805931457763396576973324025, 0.1494513491505805931457763396576973324025, 0.0666713443086881375935688098933317928578, 0.0666713443086881375935688098933317928578}), new global::Array<double>(new double[]{0.2729250867779006307144835283363421891560, 0.2628045445102466621806888698905091953727, 0.2628045445102466621806888698905091953727, 0.2331937645919904799185237048431751394317, 0.2331937645919904799185237048431751394317, 0.1862902109277342514260976414316558916912, 0.1862902109277342514260976414316558916912, 0.1255803694649046246346942992239401001976, 0.1255803694649046246346942992239401001976, 0.0556685671161736664827537204425485787285, 0.0556685671161736664827537204425485787285}), new global::Array<double>(new double[]{0.2491470458134027850005624360429512108304, 0.2491470458134027850005624360429512108304, 0.2334925365383548087608498989248780562594, 0.2334925365383548087608498989248780562594, 0.2031674267230659217490644558097983765065, 0.2031674267230659217490644558097983765065, 0.1600783285433462263346525295433590718720, 0.1600783285433462263346525295433590718720, 0.1069393259953184309602547181939962242145, 0.1069393259953184309602547181939962242145, 0.0471753363865118271946159614850170603170, 0.0471753363865118271946159614850170603170}), new global::Array<double>(new double[]{0.2325515532308739101945895152688359481566, 0.2262831802628972384120901860397766184347, 0.2262831802628972384120901860397766184347, 0.2078160475368885023125232193060527633865, 0.2078160475368885023125232193060527633865, 0.1781459807619457382800466919960979955128, 0.1781459807619457382800466919960979955128, 0.1388735102197872384636017768688714676218, 0.1388735102197872384636017768688714676218, 0.0921214998377284479144217759537971209236, 0.0921214998377284479144217759537971209236, 0.0404840047653158795200215922009860600419, 0.0404840047653158795200215922009860600419}), new global::Array<double>(new double[]{0.2152638534631577901958764433162600352749, 0.2152638534631577901958764433162600352749, 0.2051984637212956039659240656612180557103, 0.2051984637212956039659240656612180557103, 0.1855383974779378137417165901251570362489, 0.1855383974779378137417165901251570362489, 0.1572031671581935345696019386238421566056, 0.1572031671581935345696019386238421566056, 0.1215185706879031846894148090724766259566, 0.1215185706879031846894148090724766259566, 0.0801580871597602098056332770628543095836, 0.0801580871597602098056332770628543095836, 0.0351194603317518630318328761381917806197, 0.0351194603317518630318328761381917806197}), new global::Array<double>(new double[]{0.2025782419255612728806201999675193148386, 0.1984314853271115764561183264438393248186, 0.1984314853271115764561183264438393248186, 0.1861610000155622110268005618664228245062, 0.1861610000155622110268005618664228245062, 0.1662692058169939335532008604812088111309, 0.1662692058169939335532008604812088111309, 0.1395706779261543144478047945110283225208, 0.1395706779261543144478047945110283225208, 0.1071592204671719350118695466858693034155, 0.1071592204671719350118695466858693034155, 0.0703660474881081247092674164506673384667, 0.0703660474881081247092674164506673384667, 0.0307532419961172683546283935772044177217, 0.0307532419961172683546283935772044177217}), new global::Array<double>(new double[]{0.1894506104550684962853967232082831051469, 0.1894506104550684962853967232082831051469, 0.1826034150449235888667636679692199393835, 0.1826034150449235888667636679692199393835, 0.1691565193950025381893120790303599622116, 0.1691565193950025381893120790303599622116, 0.1495959888165767320815017305474785489704, 0.1495959888165767320815017305474785489704, 0.1246289712555338720524762821920164201448, 0.1246289712555338720524762821920164201448, 0.0951585116824927848099251076022462263552, 0.0951585116824927848099251076022462263552, 0.0622535239386478928628438369943776942749, 0.0622535239386478928628438369943776942749, 0.0271524594117540948517805724560181035122, 0.0271524594117540948517805724560181035122}), new global::Array<double>(new double[]{0.1794464703562065254582656442618856214487, 0.1765627053669926463252709901131972391509, 0.1765627053669926463252709901131972391509, 0.1680041021564500445099706637883231550211, 0.1680041021564500445099706637883231550211, 0.1540457610768102880814315948019586119404, 0.1540457610768102880814315948019586119404, 0.1351363684685254732863199817023501973721, 0.1351363684685254732863199817023501973721, 0.1118838471934039710947883856263559267358, 0.1118838471934039710947883856263559267358, 0.0850361483171791808835353701910620738504, 0.0850361483171791808835353701910620738504, 0.0554595293739872011294401653582446605128, 0.0554595293739872011294401653582446605128, 0.0241483028685479319601100262875653246916, 0.0241483028685479319601100262875653246916}), new global::Array<double>(new double[]{0.1691423829631435918406564701349866103341, 0.1691423829631435918406564701349866103341, 0.1642764837458327229860537764659275904123, 0.1642764837458327229860537764659275904123, 0.1546846751262652449254180038363747721932, 0.1546846751262652449254180038363747721932, 0.1406429146706506512047313037519472280955, 0.1406429146706506512047313037519472280955, 0.1225552067114784601845191268002015552281, 0.1225552067114784601845191268002015552281, 0.1009420441062871655628139849248346070628, 0.1009420441062871655628139849248346070628, 0.0764257302548890565291296776166365256053, 0.0764257302548890565291296776166365256053, 0.0497145488949697964533349462026386416808, 0.0497145488949697964533349462026386416808, 0.0216160135264833103133427102664524693876, 0.0216160135264833103133427102664524693876}), new global::Array<double>(new double[]{0.1610544498487836959791636253209167350399, 0.1589688433939543476499564394650472016787, 0.1589688433939543476499564394650472016787, 0.1527660420658596667788554008976629984610, 0.1527660420658596667788554008976629984610, 0.1426067021736066117757461094419029724756, 0.1426067021736066117757461094419029724756, 0.1287539625393362276755157848568771170558, 0.1287539625393362276755157848568771170558, 0.1115666455473339947160239016817659974813, 0.1115666455473339947160239016817659974813, 0.0914900216224499994644620941238396526609, 0.0914900216224499994644620941238396526609, 0.0690445427376412265807082580060130449618, 0.0690445427376412265807082580060130449618, 0.0448142267656996003328381574019942119517, 0.0448142267656996003328381574019942119517, 0.0194617882297264770363120414644384357529, 0.0194617882297264770363120414644384357529}), new global::Array<double>(new double[]{0.1527533871307258506980843319550975934919, 0.1527533871307258506980843319550975934919, 0.1491729864726037467878287370019694366926, 0.1491729864726037467878287370019694366926, 0.1420961093183820513292983250671649330345, 0.1420961093183820513292983250671649330345, 0.1316886384491766268984944997481631349161, 0.1316886384491766268984944997481631349161, 0.1181945319615184173123773777113822870050, 0.1181945319615184173123773777113822870050, 0.1019301198172404350367501354803498761666, 0.1019301198172404350367501354803498761666, 0.0832767415767047487247581432220462061001, 0.0832767415767047487247581432220462061001, 0.0626720483341090635695065351870416063516, 0.0626720483341090635695065351870416063516, 0.0406014298003869413310399522749321098790, 0.0406014298003869413310399522749321098790, 0.0176140071391521183118619623518528163621, 0.0176140071391521183118619623518528163621}), new global::Array<double>(new double[]{0.1460811336496904271919851476833711882448, 0.1445244039899700590638271665537525436099, 0.1445244039899700590638271665537525436099, 0.1398873947910731547221334238675831108927, 0.1398873947910731547221334238675831108927, 0.1322689386333374617810525744967756043290, 0.1322689386333374617810525744967756043290, 0.1218314160537285341953671771257335983563, 0.1218314160537285341953671771257335983563, 0.1087972991671483776634745780701056420336, 0.1087972991671483776634745780701056420336, 0.0934444234560338615532897411139320884835, 0.0934444234560338615532897411139320884835, 0.0761001136283793020170516533001831792261, 0.0761001136283793020170516533001831792261, 0.0571344254268572082836358264724479574912, 0.0571344254268572082836358264724479574912, 0.0369537897708524937999506682993296661889, 0.0369537897708524937999506682993296661889, 0.0160172282577743333242246168584710152658, 0.0160172282577743333242246168584710152658}), new global::Array<double>(new double[]{0.1392518728556319933754102483418099578739, 0.1392518728556319933754102483418099578739, 0.1365414983460151713525738312315173965863, 0.1365414983460151713525738312315173965863, 0.1311735047870623707329649925303074458757, 0.1311735047870623707329649925303074458757, 0.1232523768105124242855609861548144719594, 0.1232523768105124242855609861548144719594, 0.1129322960805392183934006074217843191142, 0.1129322960805392183934006074217843191142, 0.1004141444428809649320788378305362823508, 0.1004141444428809649320788378305362823508, 0.0859416062170677274144436813727028661891, 0.0859416062170677274144436813727028661891, 0.0697964684245204880949614189302176573987, 0.0697964684245204880949614189302176573987, 0.0522933351526832859403120512732112561121, 0.0522933351526832859403120512732112561121, 0.0337749015848141547933022468659129013491, 0.0337749015848141547933022468659129013491, 0.0146279952982722006849910980471854451902, 0.0146279952982722006849910980471854451902}), new global::Array<double>(new double[]{0.1336545721861061753514571105458443385831, 0.1324620394046966173716424647033169258050, 0.1324620394046966173716424647033169258050, 0.1289057221880821499785953393997936532597, 0.1289057221880821499785953393997936532597, 0.1230490843067295304675784006720096548158, 0.1230490843067295304675784006720096548158, 0.1149966402224113649416435129339613014914, 0.1149966402224113649416435129339613014914, 0.1048920914645414100740861850147438548584, 0.1048920914645414100740861850147438548584, 0.0929157660600351474770186173697646486034, 0.0929157660600351474770186173697646486034, 0.0792814117767189549228925247420432269137, 0.0792814117767189549228925247420432269137, 0.0642324214085258521271696151589109980391, 0.0642324214085258521271696151589109980391, 0.0480376717310846685716410716320339965612, 0.0480376717310846685716410716320339965612, 0.0309880058569794443106942196418845053837, 0.0309880058569794443106942196418845053837, 0.0134118594871417720813094934586150649766, 0.0134118594871417720813094934586150649766}), new global::Array<double>(new double[]{0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.1216704729278033912044631534762624256070, 0.1216704729278033912044631534762624256070, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.0861901615319532759171852029837426671850, 0.0861901615319532759171852029837426671850, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759})});
		}
		public    Analyze(global::haxe.lang.EmptyObject empty){
			unchecked {
				#line 28 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
				}
				
			}
			#line default
		}
		
		
		public    Analyze(){
			unchecked {
				#line 28 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::verb.core.Analyze.__hx_ctor_verb_core_Analyze(this);
			}
			#line default
		}
		
		
		public static   void __hx_ctor_verb_core_Analyze(global::verb.core.Analyze __temp_me38){
			unchecked {
				#line 28 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
				}
				
			}
			#line default
		}
		
		
		public static   global::Array<object> knotMultiplicities(global::Array<double> knots){
			unchecked {
				#line 41 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> mults = new global::Array<object>(new object[]{new global::verb.core.KnotMultiplicity(((double) (knots[0]) ), ((int) (0) ))});
				global::verb.core.KnotMultiplicity curr = ((global::verb.core.KnotMultiplicity) (mults[0]) );
				#line 44 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 44 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g = 0;
					#line 44 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					while (( _g < knots.length )){
						#line 44 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						double knot = knots[_g];
						#line 44 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						 ++ _g;
						if (( global::System.Math.Abs(((double) (( knot - curr.knot )) )) > 1e-10 )) {
							#line 46 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							curr = new global::verb.core.KnotMultiplicity(((double) (knot) ), ((int) (0) ));
							mults.push(curr);
						}
						
						#line 50 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						curr.inc();
					}
					
				}
				
				#line 53 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return mults;
			}
			#line default
		}
		
		
		public static   bool isRationalSurfaceClosed(global::verb.core.types.NurbsSurfaceData surface, global::haxe.lang.Null<bool> uDir){
			unchecked {
				#line 56 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				bool __temp_uDir34 = ( ( ! (uDir.hasValue) ) ? (global::haxe.lang.Runtime.toBool(true)) : (uDir.@value) );
				#line 58 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> cpts = default(global::Array<object>);
				#line 58 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (__temp_uDir34) {
					#line 58 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					cpts = surface.controlPoints;
				}
				 else {
					#line 58 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					cpts = global::verb.core.Mat.transpose<object>(surface.controlPoints);
				}
				
				#line 60 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 60 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g1 = 0;
					#line 60 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (cpts[0]) ))) ).length;
					#line 60 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					while (( _g1 < _g )){
						#line 60 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						int i = _g1++;
						bool test = ( global::verb.core.Vec.dist(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (cpts[0]) ))) )[i]) ))) ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (cpts[( cpts.length - 1 )]) ))) )[i]) ))) )) < 1e-10 );
						if ( ! (test) ) {
							#line 62 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							return false;
						}
						
					}
					
				}
				
				#line 65 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return true;
			}
			#line default
		}
		
		
		public static   global::Array<double> rationalSurfaceClosestPoint(global::verb.core.types.NurbsSurfaceData surface, global::Array<double> p){
			unchecked {
				#line 69 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> uv = global::verb.core.Analyze.rationalSurfaceClosestParam(surface, p);
				return global::verb.core.Eval.rationalSurfacePoint(surface, uv[0], uv[1]);
			}
			#line default
		}
		
		
		public static   global::Array<double> rationalSurfaceClosestParam(global::verb.core.types.NurbsSurfaceData surface, global::Array<double> p){
			unchecked {
				#line 73 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> surface1 = new global::Array<object>(new object[]{surface});
				#line 117 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				int maxits = 5;
				int i = 0;
				#line 118 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> e = default(global::Array<object>);
				#line 120 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double eps1 = 0.0001;
				double eps2 = 0.0005;
				#line 118 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> dif = default(global::Array<double>);
				#line 123 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double minu = ((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ).knotsU[0];
				double maxu = default(double);
				#line 124 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 124 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a = ((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ).knotsU;
					#line 124 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					maxu = a[( a.length - 1 )];
				}
				
				#line 125 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double minv = ((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ).knotsV[0];
				double maxv = default(double);
				#line 126 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 126 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a1 = ((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ).knotsV;
					#line 126 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					maxv = a1[( a1.length - 1 )];
				}
				
				#line 127 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				bool closedu = global::verb.core.Analyze.isRationalSurfaceClosed(((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ), default(global::haxe.lang.Null<bool>));
				bool closedv = global::verb.core.Analyze.isRationalSurfaceClosed(((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ), new global::haxe.lang.Null<bool>(false, true));
				#line 118 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> cuv = default(global::Array<double>);
				#line 134 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::verb.core.types.MeshData tess = global::verb.core.Tess.rationalSurfaceAdaptive(((global::verb.core.types.NurbsSurfaceData) (surface1[0]) ), new global::verb.core.types.AdaptiveRefinementOptions());
				#line 136 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double dmin = global::Math.POSITIVE_INFINITY;
				#line 138 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 138 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g1 = 0;
					#line 138 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g = tess.points.length;
					#line 138 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					while (( _g1 < _g )){
						#line 138 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						int i1 = _g1++;
						global::Array<double> x = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (tess.points[i1]) ))) );
						double d = global::verb.core.Vec.normSquared(global::verb.core.Vec.sub(p, x));
						#line 142 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (( d < dmin )) {
							#line 143 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							dmin = d;
							cuv = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (tess.uvs[i1]) ))) );
						}
						
					}
					
				}
				
				#line 148 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Function f = new global::verb.core.Analyze_rationalSurfaceClosestParam_148__Fun(((global::Array<object>) (surface1) ));
				#line 152 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Function n = ( (( global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun.__hx_current != default(global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun) )) ? (global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun.__hx_current) : (global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun.__hx_current = ((global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun) (new global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun()) )) );
				#line 191 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				while (( i < maxits )){
					#line 193 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					e = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (f.__hx_invoke1_o(default(double), cuv)) ))) );
					dif = global::verb.core.Vec.sub(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[0]) ))) )[0]) ))) ), p);
					#line 199 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c1v = global::verb.core.Vec.norm(dif);
					#line 212 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c2an = global::verb.core.Vec.dot(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[1]) ))) )[0]) ))) ), dif);
					double c2ad = ( global::verb.core.Vec.norm(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[1]) ))) )[0]) ))) )) * c1v );
					#line 215 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c2bn = global::verb.core.Vec.dot(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[0]) ))) )[1]) ))) ), dif);
					double c2bd = ( global::verb.core.Vec.norm(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[0]) ))) )[1]) ))) )) * c1v );
					#line 218 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c2av = ( c2an / c2ad );
					double c2bv = ( c2bn / c2bd );
					#line 221 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					bool c1 = ( c1v < eps1 );
					bool c2a = ( c2av < eps2 );
					bool c2b = ( c2bv < eps2 );
					#line 226 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( ( c1 && c2a ) && c2b )) {
						#line 227 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return cuv;
					}
					
					#line 231 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> ct = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (n.__hx_invoke3_o(default(double), cuv, default(double), e, default(double), dif)) ))) );
					#line 234 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( ct[0] < minu )) {
						#line 235 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (closedu) {
							#line 235 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							ct = new global::Array<double>(new double[]{( maxu - (( ct[0] - minu )) ), ct[1]});
						}
						 else {
							#line 235 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							ct = new global::Array<double>(new double[]{( minu + 1e-10 ), ct[1]});
						}
						
					}
					 else {
						#line 236 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (( ct[0] > maxu )) {
							#line 237 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							if (closedu) {
								#line 237 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
								ct = new global::Array<double>(new double[]{( minu + (( ct[0] - maxu )) ), ct[1]});
							}
							 else {
								#line 237 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
								ct = new global::Array<double>(new double[]{( maxu - 1e-10 ), ct[1]});
							}
							
						}
						
					}
					
					#line 240 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( ct[1] < minv )) {
						#line 241 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (closedv) {
							#line 241 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							ct = new global::Array<double>(new double[]{ct[0], ( maxv - (( ct[1] - minv )) )});
						}
						 else {
							#line 241 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							ct = new global::Array<double>(new double[]{ct[0], ( minv + 1e-10 )});
						}
						
					}
					 else {
						#line 242 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (( ct[1] > maxv )) {
							#line 243 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							if (closedv) {
								#line 243 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
								ct = new global::Array<double>(new double[]{ct[0], ( minv + (( ct[0] - maxv )) )});
							}
							 else {
								#line 243 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
								ct = new global::Array<double>(new double[]{ct[0], ( maxv - 1e-10 )});
							}
							
						}
						
					}
					
					#line 247 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c3v0 = global::verb.core.Vec.norm(global::verb.core.Vec.mul(( ct[0] - cuv[0] ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[1]) ))) )[0]) ))) )));
					double c3v1 = global::verb.core.Vec.norm(global::verb.core.Vec.mul(( ct[1] - cuv[1] ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e[0]) ))) )[1]) ))) )));
					#line 250 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( ( c3v0 + c3v1 ) < eps1 )) {
						#line 251 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return cuv;
					}
					
					#line 254 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					cuv = ct;
					i++;
				}
				
				#line 259 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return cuv;
			}
			#line default
		}
		
		
		public static   global::Array<double> rationalCurveClosestPoint(global::verb.core.types.NurbsCurveData curve, global::Array<double> p){
			unchecked {
				#line 264 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return global::verb.core.Eval.rationalCurvePoint(curve, global::verb.core.Analyze.rationalCurveClosestParam(curve, p));
			}
			#line default
		}
		
		
		public static   double rationalCurveClosestParam(global::verb.core.types.NurbsCurveData curve, global::Array<double> p){
			unchecked {
				#line 267 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> curve1 = new global::Array<object>(new object[]{curve});
				#line 299 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double tol = 1.0e-3;
				double min = global::Math.POSITIVE_INFINITY;
				double u = 0.0;
				#line 303 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> pts = global::verb.core.Tess.rationalCurveAdaptiveSample(((global::verb.core.types.NurbsCurveData) (curve1[0]) ), new global::haxe.lang.Null<double>(tol, true), new global::haxe.lang.Null<bool>(true, true));
				#line 305 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 305 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g1 = 0;
					#line 305 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g = ( pts.length - 1 );
					#line 305 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					while (( _g1 < _g )){
						#line 305 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						int i = _g1++;
						#line 307 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						double u0 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (pts[i]) ))) )[0];
						double u1 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (pts[( i + 1 )]) ))) )[0];
						#line 310 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						global::Array<double> p0 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (pts[i]) ))) ).slice(1, default(global::haxe.lang.Null<int>));
						global::Array<double> p1 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (pts[( i + 1 )]) ))) ).slice(1, default(global::haxe.lang.Null<int>));
						#line 313 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						object proj = global::verb.core.Trig.segmentClosestPoint(p, p0, p1, u0, u1);
						double d = global::verb.core.Vec.norm(global::verb.core.Vec.sub(p, ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::haxe.lang.Runtime.getField(proj, "pt", 25092, true)) ))) )));
						#line 316 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (( d < min )) {
							#line 317 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							min = d;
							u = ((double) (global::haxe.lang.Runtime.getField_f(proj, "u", 117, true)) );
						}
						
					}
					
				}
				
				#line 322 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				int maxits = 5;
				int i1 = 0;
				#line 322 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> e = default(global::Array<object>);
				#line 325 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double eps1 = 0.0001;
				double eps2 = 0.0005;
				#line 322 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> dif = default(global::Array<double>);
				#line 328 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double minu = ((global::verb.core.types.NurbsCurveData) (curve1[0]) ).knots[0];
				double maxu = default(double);
				#line 329 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 329 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a = ((global::verb.core.types.NurbsCurveData) (curve1[0]) ).knots;
					#line 329 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					maxu = a[( a.length - 1 )];
				}
				
				#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> __temp_stmt247 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::verb.core.types.NurbsCurveData) (curve1[0]) ).controlPoints[0]) ))) );
				#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> __temp_stmt248 = default(global::Array<double>);
				#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<object> a1 = ((global::verb.core.types.NurbsCurveData) (curve1[0]) ).controlPoints;
					#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					__temp_stmt248 = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (a1[( a1.length - 1 )]) ))) );
				}
				
				#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> __temp_stmt246 = global::verb.core.Vec.sub(__temp_stmt247, __temp_stmt248);
				#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double __temp_stmt245 = global::verb.core.Vec.normSquared(__temp_stmt246);
				#line 330 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				bool closed = ( __temp_stmt245 < 1e-10 );
				double cu = u;
				#line 333 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Function f = new global::verb.core.Analyze_rationalCurveClosestParam_333__Fun(((global::Array<object>) (curve1) ));
				#line 337 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Function n = ( (( global::verb.core.Analyze_rationalCurveClosestParam_337__Fun.__hx_current != default(global::verb.core.Analyze_rationalCurveClosestParam_337__Fun) )) ? (global::verb.core.Analyze_rationalCurveClosestParam_337__Fun.__hx_current) : (global::verb.core.Analyze_rationalCurveClosestParam_337__Fun.__hx_current = ((global::verb.core.Analyze_rationalCurveClosestParam_337__Fun) (new global::verb.core.Analyze_rationalCurveClosestParam_337__Fun()) )) );
				#line 349 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				while (( i1 < maxits )){
					#line 351 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					e = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (f.__hx_invoke1_o(cu, global::haxe.lang.Runtime.undefined)) ))) );
					dif = global::verb.core.Vec.sub(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e[0]) ))) ), p);
					#line 355 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c1v = global::verb.core.Vec.norm(dif);
					#line 360 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c2n = global::verb.core.Vec.dot(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e[1]) ))) ), dif);
					double c2d = ( global::verb.core.Vec.norm(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e[1]) ))) )) * c1v );
					#line 363 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c2v = ( c2n / c2d );
					#line 365 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					bool c1 = ( c1v < eps1 );
					bool c2 = ( global::System.Math.Abs(((double) (c2v) )) < eps2 );
					#line 369 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( c1 && c2 )) {
						#line 370 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return cu;
					}
					
					#line 373 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double ct = ((double) (n.__hx_invoke3_f(cu, global::haxe.lang.Runtime.undefined, default(double), e, default(double), dif)) );
					#line 376 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( ct < minu )) {
						#line 377 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (closed) {
							#line 377 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							ct = ( maxu - (( ct - minu )) );
						}
						 else {
							#line 377 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							ct = minu;
						}
						
					}
					 else {
						#line 378 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						if (( ct > maxu )) {
							#line 379 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							if (closed) {
								#line 379 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
								ct = ( minu + (( ct - maxu )) );
							}
							 else {
								#line 379 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
								ct = maxu;
							}
							
						}
						
					}
					
					#line 383 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double c3v = global::verb.core.Vec.norm(global::verb.core.Vec.mul(( ct - cu ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e[1]) ))) )));
					#line 385 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( c3v < eps1 )) {
						#line 386 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return cu;
					}
					
					#line 389 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					cu = ct;
					i1++;
				}
				
				#line 394 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return cu;
			}
			#line default
		}
		
		
		public static   double rationalCurveParamAtArcLength(global::verb.core.types.NurbsCurveData curve, double len, global::haxe.lang.Null<double> tol, global::Array<object> beziers, global::Array<double> bezierLengths){
			unchecked {
				#line 402 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double __temp_tol35 = ( ( ! (tol.hasValue) ) ? (((double) (1e-3) )) : (tol.@value) );
				#line 404 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (( len < 1e-10 )) {
					#line 404 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					return curve.knots[0];
				}
				
				#line 406 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> crvs = default(global::Array<object>);
				#line 406 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (( beziers != default(global::Array<object>) )) {
					#line 406 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					crvs = beziers;
				}
				 else {
					#line 406 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					crvs = global::verb.core.Modify.decomposeCurveIntoBeziers(curve);
				}
				
				#line 407 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				int i = 0;
				global::verb.core.types.NurbsCurveData cc = ((global::verb.core.types.NurbsCurveData) (crvs[i]) );
				double cl = -1e-10;
				global::Array<double> bezier_lengths = default(global::Array<double>);
				#line 410 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (( bezierLengths != default(global::Array<double>) )) {
					#line 410 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					bezier_lengths = bezierLengths;
				}
				 else {
					#line 410 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					bezier_lengths = new global::Array<double>(new double[]{});
				}
				
				#line 413 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				while (( ( cl < len ) && ( i < crvs.length ) )){
					#line 415 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( i < bezier_lengths.length )) {
						#line 415 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						bezier_lengths[i] = bezier_lengths[i];
					}
					 else {
						#line 415 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						bezier_lengths[i] = global::verb.core.Analyze.rationalBezierCurveArcLength(curve, default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<int>));
					}
					
					#line 417 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					cl += bezier_lengths[i];
					#line 419 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( len < ( cl + 1e-10 ) )) {
						#line 420 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						return global::verb.core.Analyze.rationalBezierCurveParamAtArcLength(curve, len, new global::haxe.lang.Null<double>(__temp_tol35, true), new global::haxe.lang.Null<double>(bezier_lengths[i], true));
					}
					
					#line 423 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					i++;
				}
				
				#line 426 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return ((double) (-1) );
			}
			#line default
		}
		
		
		public static   double rationalBezierCurveParamAtArcLength(global::verb.core.types.NurbsCurveData curve, double len, global::haxe.lang.Null<double> tol, global::haxe.lang.Null<double> totalLength){
			unchecked {
				#line 445 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (( len < 0 )) {
					#line 445 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					return curve.knots[0];
				}
				
				#line 448 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Null<double> totalLen = default(global::haxe.lang.Null<double>);
				#line 448 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (totalLength.hasValue) {
					#line 448 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					totalLen = totalLength;
				}
				 else {
					#line 448 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					totalLen = new global::haxe.lang.Null<double>(global::verb.core.Analyze.rationalBezierCurveArcLength(curve, default(global::haxe.lang.Null<double>), default(global::haxe.lang.Null<int>)), true);
				}
				
				#line 450 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (( len > totalLen.@value )) {
					#line 450 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a = curve.knots;
					#line 450 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					return a[( a.length - 1 )];
				}
				
				#line 454 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double start_p = curve.knots[0];
				#line 454 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double start_l = 0.0;
				double end_p = default(double);
				#line 455 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 455 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a1 = curve.knots;
					#line 455 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					end_p = a1[( a1.length - 1 )];
				}
				
				#line 455 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Null<double> end_l = totalLen;
				double mid_p = 0.0;
				#line 456 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double mid_l = 0.0;
				global::haxe.lang.Null<double> tol1 = default(global::haxe.lang.Null<double>);
				#line 457 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if (tol.hasValue) {
					#line 457 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					tol1 = tol;
				}
				 else {
					#line 457 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					tol1 = new global::haxe.lang.Null<double>(2e-06, true);
				}
				
				#line 459 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				while (( ( end_l.@value - start_l ) > tol1.@value )){
					#line 461 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					mid_p = ( (( start_p + end_p )) / 2 );
					mid_l = global::verb.core.Analyze.rationalBezierCurveArcLength(curve, new global::haxe.lang.Null<double>(mid_p, true), default(global::haxe.lang.Null<int>));
					#line 464 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					if (( mid_l > len )) {
						#line 465 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						end_p = mid_p;
						end_l = new global::haxe.lang.Null<double>(mid_l, true);
					}
					 else {
						#line 468 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						start_p = mid_p;
						start_l = mid_l;
					}
					
				}
				
				#line 474 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return ( (( start_p + end_p )) / 2 );
			}
			#line default
		}
		
		
		public static   double rationalCurveArcLength(global::verb.core.types.NurbsCurveData curve, global::haxe.lang.Null<double> u, global::haxe.lang.Null<int> gaussDegIncrease){
			unchecked {
				#line 488 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				int __temp_gaussDegIncrease36 = ( ( ! (gaussDegIncrease.hasValue) ) ? (((int) (16) )) : (gaussDegIncrease.@value) );
				if ( ! (u.hasValue) ) {
					#line 489 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a = curve.knots;
					#line 489 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					u = new global::haxe.lang.Null<double>(a[( a.length - 1 )], true);
				}
				 else {
					#line 489 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					u = u;
				}
				
				#line 491 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> crvs = global::verb.core.Modify.decomposeCurveIntoBeziers(curve);
				int i = 0;
				global::verb.core.types.NurbsCurveData cc = ((global::verb.core.types.NurbsCurveData) (crvs[0]) );
				double sum = 0.0;
				#line 496 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				while (( ( i < crvs.length ) && ( ( cc.knots[0] + 1e-10 ) < u.@value ) )){
					#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					double param = default(double);
					#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					{
						#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						double b = u.@value;
						#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						double __temp_stmt249 = default(double);
						#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						{
							#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							global::Array<double> a1 = cc.knots;
							#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
							__temp_stmt249 = a1[( a1.length - 1 )];
						}
						
						#line 497 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						param = global::System.Math.Min(((double) (__temp_stmt249) ), ((double) (b) ));
					}
					
					#line 498 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					sum += global::verb.core.Analyze.rationalBezierCurveArcLength(cc, new global::haxe.lang.Null<double>(param, true), new global::haxe.lang.Null<int>(__temp_gaussDegIncrease36, true));
					cc = ((global::verb.core.types.NurbsCurveData) (crvs[ ++ i]) );
				}
				
				#line 502 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return sum;
			}
			#line default
		}
		
		
		public static   double rationalBezierCurveArcLength(global::verb.core.types.NurbsCurveData curve, global::haxe.lang.Null<double> u, global::haxe.lang.Null<int> gaussDegIncrease){
			unchecked {
				#line 516 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				int __temp_gaussDegIncrease37 = ( ( ! (gaussDegIncrease.hasValue) ) ? (((int) (16) )) : (gaussDegIncrease.@value) );
				#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::haxe.lang.Null<double> u1 = default(global::haxe.lang.Null<double>);
				#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				if ( ! (u.hasValue) ) {
					#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					global::Array<double> a = curve.knots;
					#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					u1 = new global::haxe.lang.Null<double>(a[( a.length - 1 )], true);
				}
				 else {
					#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					u1 = u;
				}
				
				#line 519 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double z = ( (( u1.@value - curve.knots[0] )) / 2 );
				double sum = 0.0;
				int gaussDeg = ( curve.degree + __temp_gaussDegIncrease37 );
				#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double cu = default(double);
				#line 518 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> tan = default(global::Array<object>);
				#line 525 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				{
					#line 525 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					int _g = 0;
					#line 525 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
					while (( _g < ((int) (gaussDeg) ) )){
						#line 525 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						int i = _g++;
						#line 527 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						cu = ( ( ( z * ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::verb.core.Analyze.Tvalues[gaussDeg]) ))) )[i] ) + z ) + curve.knots[0] );
						tan = global::verb.core.Eval.rationalCurveDerivatives(curve, cu, new global::haxe.lang.Null<int>(1, true));
						#line 530 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
						sum += ( ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (global::verb.core.Analyze.Cvalues[gaussDeg]) ))) )[i] * global::verb.core.Vec.norm(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (tan[1]) ))) )) );
					}
					
				}
				
				#line 534 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return ( z * sum );
			}
			#line default
		}
		
		
		public static  global::Array<object> Tvalues;
		
		public static  global::Array<object> Cvalues;
		
		public static  new object __hx_createEmpty(){
			unchecked {
				#line 28 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return new global::verb.core.Analyze(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			}
			#line default
		}
		
		
		public static  new object __hx_create(global::Array arr){
			unchecked {
				#line 28 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return new global::verb.core.Analyze();
			}
			#line default
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace verb.core{
	public  class Analyze_rationalSurfaceClosestParam_148__Fun : global::haxe.lang.Function {
		public    Analyze_rationalSurfaceClosestParam_148__Fun(global::Array<object> surface1) : base(1, 0){
			unchecked {
				#line 149 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				this.surface1 = surface1;
			}
			#line default
		}
		
		
		public override   object __hx_invoke1_o(double __fn_float1, object __fn_dyn1){
			unchecked {
				#line 148 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> uv = ( (global::haxe.lang.Runtime.eq(__fn_dyn1, global::haxe.lang.Runtime.undefined)) ? (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (__fn_dyn1) ))) )) );
				return global::verb.core.Eval.rationalSurfaceDerivatives(((global::verb.core.types.NurbsSurfaceData) (this.surface1[0]) ), uv[0], uv[1], new global::haxe.lang.Null<int>(2, true));
			}
			#line default
		}
		
		
		public  global::Array<object> surface1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace verb.core{
	public  class Analyze_rationalSurfaceClosestParam_152__Fun : global::haxe.lang.Function {
		public    Analyze_rationalSurfaceClosestParam_152__Fun() : base(3, 0){
			unchecked {
			}
			#line default
		}
		
		
		public static  global::verb.core.Analyze_rationalSurfaceClosestParam_152__Fun __hx_current;
		
		public override   object __hx_invoke3_o(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3){
			unchecked {
				#line 152 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> r = ( (global::haxe.lang.Runtime.eq(__fn_dyn3, global::haxe.lang.Runtime.undefined)) ? (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((object) (__fn_float3) )) ))) )) : (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (__fn_dyn3) ))) )) );
				#line 152 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> e1 = ( (global::haxe.lang.Runtime.eq(__fn_dyn2, global::haxe.lang.Runtime.undefined)) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float2) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn2) ))) )) );
				#line 152 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> uv1 = ( (global::haxe.lang.Runtime.eq(__fn_dyn1, global::haxe.lang.Runtime.undefined)) ? (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((object) (__fn_float1) )) ))) )) : (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (__fn_dyn1) ))) )) );
				#line 157 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> Su = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e1[1]) ))) )[0]) ))) );
				global::Array<double> Sv = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e1[0]) ))) )[1]) ))) );
				#line 160 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> Suu = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e1[2]) ))) )[0]) ))) );
				global::Array<double> Svv = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e1[0]) ))) )[2]) ))) );
				#line 163 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> Suv = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e1[1]) ))) )[1]) ))) );
				global::Array<double> Svu = ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (e1[1]) ))) )[1]) ))) );
				#line 166 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double f1 = global::verb.core.Vec.dot(Su, r);
				double g = global::verb.core.Vec.dot(Sv, r);
				#line 169 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> k = new global::Array<double>(new double[]{ - (f1) ,  - (g) });
				#line 171 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double J00 = ( global::verb.core.Vec.dot(Su, Su) + global::verb.core.Vec.dot(Suu, r) );
				double J01 = ( global::verb.core.Vec.dot(Su, Sv) + global::verb.core.Vec.dot(Suv, r) );
				double J10 = ( global::verb.core.Vec.dot(Su, Sv) + global::verb.core.Vec.dot(Svu, r) );
				double J11 = ( global::verb.core.Vec.dot(Sv, Sv) + global::verb.core.Vec.dot(Svv, r) );
				#line 176 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> J = new global::Array<object>(new object[]{new global::Array<double>(new double[]{J00, J01}), new global::Array<double>(new double[]{J10, J11})});
				#line 185 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> d1 = global::verb.core.Mat.solve(J, k);
				#line 187 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return global::verb.core.Vec.@add(d1, uv1);
			}
			#line default
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace verb.core{
	public  class Analyze_rationalCurveClosestParam_333__Fun : global::haxe.lang.Function {
		public    Analyze_rationalCurveClosestParam_333__Fun(global::Array<object> curve1) : base(1, 0){
			unchecked {
				#line 334 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				this.curve1 = curve1;
			}
			#line default
		}
		
		
		public override   object __hx_invoke1_o(double __fn_float1, object __fn_dyn1){
			unchecked {
				#line 333 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double u2 = ( (global::haxe.lang.Runtime.eq(__fn_dyn1, global::haxe.lang.Runtime.undefined)) ? (((double) (__fn_float1) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
				return global::verb.core.Eval.rationalCurveDerivatives(((global::verb.core.types.NurbsCurveData) (this.curve1[0]) ), u2, new global::haxe.lang.Null<int>(2, true));
			}
			#line default
		}
		
		
		public  global::Array<object> curve1;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace verb.core{
	public  class Analyze_rationalCurveClosestParam_337__Fun : global::haxe.lang.Function {
		public    Analyze_rationalCurveClosestParam_337__Fun() : base(3, 1){
			unchecked {
			}
			#line default
		}
		
		
		public static  global::verb.core.Analyze_rationalCurveClosestParam_337__Fun __hx_current;
		
		public override   double __hx_invoke3_f(double __fn_float1, object __fn_dyn1, double __fn_float2, object __fn_dyn2, double __fn_float3, object __fn_dyn3){
			unchecked {
				#line 337 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<double> d1 = ( (global::haxe.lang.Runtime.eq(__fn_dyn3, global::haxe.lang.Runtime.undefined)) ? (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (((object) (__fn_float3) )) ))) )) : (((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (__fn_dyn3) ))) )) );
				#line 337 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				global::Array<object> e1 = ( (global::haxe.lang.Runtime.eq(__fn_dyn2, global::haxe.lang.Runtime.undefined)) ? (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (((object) (__fn_float2) )) ))) )) : (((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (__fn_dyn2) ))) )) );
				#line 337 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double u3 = ( (global::haxe.lang.Runtime.eq(__fn_dyn1, global::haxe.lang.Runtime.undefined)) ? (((double) (__fn_float1) )) : (((double) (global::haxe.lang.Runtime.toDouble(__fn_dyn1)) )) );
				#line 339 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double f1 = global::verb.core.Vec.dot(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e1[1]) ))) ), d1);
				#line 342 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				double s0 = global::verb.core.Vec.dot(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e1[2]) ))) ), d1);
				double s1 = global::verb.core.Vec.dot(((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e1[1]) ))) ), ((global::Array<double>) (global::Array<object>.__hx_cast<double>(((global::Array) (e1[1]) ))) ));
				double df = ( s0 + s1 );
				#line 346 "/Users/peter/Dropbox/Github/personal/verb2/verb/src/verb/core/Analyze.hx"
				return ( u3 - ( f1 / df ) );
			}
			#line default
		}
		
		
	}
}


